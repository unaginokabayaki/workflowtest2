name: Deploy Flask App to Cloud Run

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'デプロイ環境を選択'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deploy_message:
        description: 'デプロイメッセージ (オプション)'
        required: false
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-northeast2 # Google Artifact Registry location
  REPOSITORY: flask-workflowtest2-${{ github.event.inputs.environment }} # Artifact Registryリポジトリ名
  IMAGE: my-flask-apworkflowtest2-image # Dockerイメージ名
  SERVICE: my-flask-workflowtest2-app # Cloud Runサービス名
  REGION: asia-northeast2 # Cloud Run region

jobs:
  deploy:
    # Workload Identity Federationに必要な権限
    permissions:
      contents: read      # リポジトリの内容を読み取り
      id-token: write     # OIDC トークンを生成して外部認証に使用

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4  # リポジトリのコードをチェックアウト

      - name: デプロイ情報を表示
        run: |
          echo "🚀 デプロイ開始"
          echo "環境: ${{ github.event.inputs.environment }}"
          echo "ブランチ: ${{ github.ref_name }}"
          echo "コミット: ${{ github.sha }}"
          echo "サービス名: ${{ env.SERVICE }}"
          echo "イメージタグ: ${{ github.sha }}"
          if [ "${{ github.event.inputs.deploy_message }}" != "" ]; then
            echo "メッセージ: ${{ github.event.inputs.deploy_message }}"
          fi
      
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'  # GCPの認証を実施
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}  # Workload Identity Provider
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}      # サービスアカウントのメールアドレス

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build Container
        run: |
          echo "🔨 Dockerイメージをビルド中..."
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}" .
          echo "✅ ビルド完了"

      - name: Push Container
        run: |
          echo "📤 イメージをArtifact Registryにプッシュ中..."
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}"
          echo "✅ プッシュ完了"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2  # Cloud Run にデプロイ
        with:
          service: ${{ env.SERVICE }}  # Cloud Run サービス名
          region: ${{ env.REGION }}  # デプロイ先リージョン
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}  # 使用するDockerイメージ
          # 以下のオプションを追加することを検討
          # env_vars: |
          #   ENVIRONMENT=${{ github.event.inputs.environment }}
          # cpu: 1000m
          # memory: 512Mi
          # min_instances: 0
          # max_instances: 10
          # port: 8080
          # allow_unauthenticated: true

      - name: Deploy Success Notification
        run: |
          echo "🎉 デプロイ完了！"
          echo "🌐 アプリケーションURL: ${{ steps.deploy.outputs.url }}"
          echo "📋 デプロイ詳細:"
          echo "  - 環境: ${{ github.event.inputs.environment }}"
          echo "  - イメージ: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}"
          echo "  - リージョン: ${{ env.REGION }}"
          if [ "${{ github.event.inputs.deploy_message }}" != "" ]; then
            echo "  - メッセージ: ${{ github.event.inputs.deploy_message }}"
          fi

      # オプション: Slack通知やメール通知を追加
      # - name: Slack Notification
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: |
      #       ${{ github.event.inputs.environment }} 環境へのデプロイが${{ job.status == 'success' && '成功' || '失敗' }}しました
      #       URL: ${{ steps.deploy.outputs.url }}
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # オプション: エラー時のロールバック
      # - name: Rollback on Failure
      #   if: failure()
      #   run: |
      #     echo "❌ デプロイに失敗しました。前回の正常なバージョンにロールバックを検討してください"
      #     # ここにロールバック処理を追加